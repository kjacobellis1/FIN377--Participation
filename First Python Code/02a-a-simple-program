{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A simple program (Yes, this webpage is a .ipynb file!)\n",
    "\n",
    "The goal of this notebook is to illustrate basic finance computations within a markdown document. There is an analogous .py file, whose results have to be logged. Then, to produce output, you'd have to copy and paste key output into a Word document. This notebook does both at once!\n",
    "\n",
    "_**The point of this notebook is ONLY illustration! Pay attention to its structure and flow, and get an early glimpse of just a little bit that we can do with `pandas`, `seaborn`, and a few other packages.**_\n",
    "\n",
    "First, we start by importing key packages...\n",
    "\n",
    "The core Python language is quite small (nimble and easy to maintain), so we add functionality by using external packages. **The import calls should always be at the top of your code!**\n",
    "\n",
    "## If you want to run this code (and you should try!)\n",
    "\n",
    "1. Download the raw [raw unrendered ipynb file here called \"02a-a-simple-program.ipynb\"](https://github.com/LeDataSciFi/lectures-spr2020/tree/master/content/01/python-files). On Chrome and Firefox, you simply right click the file name and select \"Save Link As\". Put the file in the same folder with the file you're working on already and then open it in Jupyter.\n",
    "1. Open **a new/second** terminal/powershell and type `pip install pandas_datareader` \n",
    "1. Click the \"Kernel\" menu above, then \"Restart & Clear Output\". Now all the results below will disappear.\n",
    "1. Click the \"Cell\" menu above, then \"Run All\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pandas_datareader as pdr # you might need to install this (see above)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data\n",
    "\n",
    "Pandas can acquire a lot of economic data itself, by downloading data from websites through built-in APIs. You'll learn what this means soon!\n",
    "\n",
    "First, we grab stock prices for three fims. Then we compute daily returns and output some basic statistics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              AAPL         MSFT           VZ\n",
      "count  3529.000000  3529.000000  3529.000000\n",
      "mean      0.001195     0.000736     0.000503\n",
      "std       0.019993     0.016712     0.013019\n",
      "min      -0.179195    -0.117131    -0.080686\n",
      "25%      -0.008105    -0.007089    -0.006257\n",
      "50%       0.000952     0.000459     0.000701\n",
      "75%       0.011256     0.008471     0.007201\n",
      "max       0.139049     0.186047     0.146324\n"
     ]
    }
   ],
   "source": [
    "stock_prices = pdr.get_data_yahoo(['AAPL','MSFT','VZ'], start=2006)\n",
    "stock_prices = stock_prices.filter(like='Adj Close') # reduce to just columns with this in the name\n",
    "stock_prices.columns = ['AAPL','MSFT','VZ']\n",
    "\n",
    "daily_pct_change = pd.DataFrame()\n",
    "for stock in ['AAPL','MSFT','VZ']:\n",
    "    daily_pct_change[stock] = stock_prices[stock].pct_change() \n",
    "\n",
    "print(daily_pct_change.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data visualization - Compare the returns of sample firms\n",
    "\n",
    "The following figure reports all of the pairwise correlations between the sample firms, along with the distribution of each.  \n",
    "\n",
    "We know from the above table that Apple has the largest mean and standard deviation of the three. The plot type below is useful for seeing if the variables have non-linear relationships, strange outliers, fat tails, or other issues. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DoLe\\Anaconda3\\lib\\site-packages\\statsmodels\\nonparametric\\kde.py:447: RuntimeWarning: invalid value encountered in greater\n",
      "  X = X[np.logical_and(X > clip[0], X < clip[1])] # won't work for two columns.\n",
      "C:\\Users\\DoLe\\Anaconda3\\lib\\site-packages\\statsmodels\\nonparametric\\kde.py:447: RuntimeWarning: invalid value encountered in less\n",
      "  X = X[np.logical_and(X > clip[0], X < clip[1])] # won't work for two columns.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0xc950048>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 540x540 with 12 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# we need this helper function for a plot\n",
    "\n",
    "def plot_unity(xdata, ydata, **kwargs):\n",
    "    '''\n",
    "    Adds a 45 degree line to the pairplot for plots off the diagonal\n",
    "    \n",
    "    Usage: \n",
    "    grid=sns.pairplot( <call pairplot as you want >  )\n",
    "    grid.map_offdiag(plot_unity)\n",
    "    '''\n",
    "    mn = min(xdata.min(), ydata.min())\n",
    "    mx = max(xdata.max(), ydata.max())\n",
    "    points = np.linspace(mn, mx, 100)\n",
    "    plt.gca().plot(points, points, color='k', marker=None,\n",
    "            linestyle='--', linewidth=1.0)\n",
    "     \n",
    "# compare the return distribution of 3 firms visually...\n",
    "    \n",
    "grid = sns.pairplot(daily_pct_change,diag_kind='kde',kind=\"reg\")\n",
    "grid.map_offdiag(plot_unity) # how cool is that!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Factor loadings\n",
    "\n",
    "A core task in asset pricing is calculating the beta of a stock, along with loadings on other factors. The canonical model is the Fama-French 3 factor model, though 4 and 5 factor models are more popular nowadays.\n",
    "\n",
    "### Merge data on factor loadings with stock return data\n",
    "\n",
    "We start by grabbing factor returns from Ken French's website, again via pandas API."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       mkt_excess     SMB     HML     RMW     CMA      RF    AAPL    MSFT  \\\n",
      "count     3502.00 3502.00 3502.00 3502.00 3502.00 3502.00 3501.00 3501.00   \n",
      "mean         0.04    0.00   -0.01    0.01    0.00    0.00    0.12    0.07   \n",
      "std          1.20    0.57    0.66    0.36    0.31    0.01    2.00    1.68   \n",
      "min         -8.95   -3.40   -4.24   -2.62   -1.74    0.00  -17.92  -11.71   \n",
      "25%         -0.40   -0.33   -0.31   -0.19   -0.18    0.00   -0.82   -0.71   \n",
      "50%          0.08    0.00   -0.03    0.01   -0.01    0.00    0.09    0.04   \n",
      "75%          0.56    0.33    0.26    0.21    0.17    0.01    1.12    0.85   \n",
      "max         11.35    4.49    4.83    1.95    1.96    0.02   13.90   18.60   \n",
      "\n",
      "           VZ  MSFT_excess  AAPL_excess  VZ_excess  \n",
      "count 3501.00      3501.00      3501.00    3501.00  \n",
      "mean     0.05         0.07         0.11       0.05  \n",
      "std      1.31         1.68         2.00       1.31  \n",
      "min     -8.07       -11.71       -17.93      -8.07  \n",
      "25%     -0.63        -0.72        -0.82      -0.63  \n",
      "50%      0.07         0.04         0.09       0.07  \n",
      "75%      0.72         0.85         1.12       0.72  \n",
      "max     14.63        18.60        13.90      14.63  \n"
     ]
    }
   ],
   "source": [
    "ff = pdr.get_data_famafrench('F-F_Research_Data_5_Factors_2x3_daily',start=2006)[0] # the [0] is because the imported obect is a dictionary, and key=0 is the dataframe\n",
    "ff.rename(columns={\"Mkt-RF\":\"mkt_excess\"}, inplace=True) # cleaner name\n",
    "ff = ff.join(daily_pct_change,how='inner') # merge with stock returns\n",
    "for stock in ['MSFT','AAPL','VZ']:    \n",
    "    ff[stock] = ff[stock] * 100 # FF store variables as percents, so convert to that\n",
    "    ff[stock+'_excess'] = ff[stock] - ff['RF'] # convert to excess returns in prep for regressions\n",
    "#print(ff.describe()) # ugly...\n",
    "pd.set_option('display.float_format', lambda x: '%.2f' % x) # show fewer digits\n",
    "pd.options.display.max_columns = ff.shape[1] # show more columns\n",
    "print(ff.describe(include = 'all')) # better!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now we run the models.\n",
    "\n",
    "We loop over the stocks, and for each stock, we regress the stock's excess returns on a market (excess) return factor, the size factor \"SMB\" and the value factor \"HML\" (see Fama and French (1993))."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " ======================================== \n",
      " MSFT \n",
      " ======================================== \n",
      "\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:            MSFT_excess   R-squared:                       0.533\n",
      "Model:                            OLS   Adj. R-squared:                  0.533\n",
      "Method:                 Least Squares   F-statistic:                     1331.\n",
      "Date:                Fri, 10 Jan 2020   Prob (F-statistic):               0.00\n",
      "Time:                        14:21:56   Log-Likelihood:                -5442.2\n",
      "No. Observations:                3501   AIC:                         1.089e+04\n",
      "Df Residuals:                    3497   BIC:                         1.092e+04\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      0.0236      0.019      1.217      0.224      -0.014       0.062\n",
      "mkt_excess     1.1043      0.018     62.865      0.000       1.070       1.139\n",
      "SMB           -0.3962      0.035    -11.221      0.000      -0.465      -0.327\n",
      "HML           -0.4470      0.031    -14.398      0.000      -0.508      -0.386\n",
      "==============================================================================\n",
      "Omnibus:                      836.860   Durbin-Watson:                   2.005\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            40286.368\n",
      "Skew:                          -0.251   Prob(JB):                         0.00\n",
      "Kurtosis:                      19.611   Cond. No.                         2.27\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "\n",
      "\n",
      "\n",
      " ======================================== \n",
      " AAPL \n",
      " ======================================== \n",
      "\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:            AAPL_excess   R-squared:                       0.380\n",
      "Model:                            OLS   Adj. R-squared:                  0.379\n",
      "Method:                 Least Squares   F-statistic:                     714.0\n",
      "Date:                Fri, 10 Jan 2020   Prob (F-statistic):               0.00\n",
      "Time:                        14:21:56   Log-Likelihood:                -6565.4\n",
      "No. Observations:                3501   AIC:                         1.314e+04\n",
      "Df Residuals:                    3497   BIC:                         1.316e+04\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      0.0676      0.027      2.532      0.011       0.015       0.120\n",
      "mkt_excess     1.0965      0.024     45.289      0.000       1.049       1.144\n",
      "SMB           -0.1288      0.049     -2.647      0.008      -0.224      -0.033\n",
      "HML           -0.4265      0.043     -9.969      0.000      -0.510      -0.343\n",
      "==============================================================================\n",
      "Omnibus:                      651.193   Durbin-Watson:                   1.940\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            10938.202\n",
      "Skew:                           0.389   Prob(JB):                         0.00\n",
      "Kurtosis:                      11.624   Cond. No.                         2.27\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "\n",
      "\n",
      "\n",
      " ======================================== \n",
      " VZ \n",
      " ======================================== \n",
      "\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:              VZ_excess   R-squared:                       0.394\n",
      "Model:                            OLS   Adj. R-squared:                  0.393\n",
      "Method:                 Least Squares   F-statistic:                     757.6\n",
      "Date:                Fri, 10 Jan 2020   Prob (F-statistic):               0.00\n",
      "Time:                        14:21:56   Log-Likelihood:                -5024.3\n",
      "No. Observations:                3501   AIC:                         1.006e+04\n",
      "Df Residuals:                    3497   BIC:                         1.008e+04\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      0.0213      0.017      1.236      0.217      -0.012       0.055\n",
      "mkt_excess     0.6924      0.016     44.411      0.000       0.662       0.723\n",
      "SMB           -0.3494      0.031    -11.150      0.000      -0.411      -0.288\n",
      "HML            0.0805      0.028      2.923      0.003       0.027       0.135\n",
      "==============================================================================\n",
      "Omnibus:                      770.293   Durbin-Watson:                   1.910\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            12316.887\n",
      "Skew:                           0.603   Prob(JB):                         0.00\n",
      "Kurtosis:                      12.109   Cond. No.                         2.27\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# run the models- \n",
    "params=pd.DataFrame()\n",
    "for stock in ['MSFT','AAPL','VZ']:        \n",
    "    print('\\n\\n\\n','='*40,'\\n',stock,'\\n','='*40,'\\n')\n",
    "    model = sm.formula.ols(formula = stock+\"_excess ~ mkt_excess + SMB + HML\", data = ff).fit()\n",
    "    print(model.summary())\n",
    "    params[stock] = model.params.tolist()\n",
    "params.set_index(model.params.index,inplace=True)   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Estimated factor loadings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              MSFT    AAPL      VZ\n",
      "Intercept   0.0236  0.0676  0.0213\n",
      "mkt_excess  1.1043  1.0965  0.6924\n",
      "SMB        -0.3962 -0.1288 -0.3494\n",
      "HML        -0.4470 -0.4265  0.0805\n"
     ]
    }
   ],
   "source": [
    "pd.set_option('display.float_format', lambda x: '%.4f' % x) # show fewer digits\n",
    "print(params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Plot the cumulative returns of the three stocks\n",
    "\n",
    "Finally, I plot the cumulative return from January 1, 2006 until January 2020 by computing for each stock $i$\n",
    "\n",
    "$cumret(i,T)=\\prod^T_{t=0} (1+r_{i,t})$\n",
    "\n",
    "where $T$ is a date and $t=0$ corresponds to the beginning of the sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DoLe\\Anaconda3\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\converter.py:103: FutureWarning: Using an implicitly registered datetime converter for a matplotlib plotting method. The converter was registered by pandas on import. Future versions of pandas will require you to explicitly register matplotlib converters.\n",
      "\n",
      "To register the converters:\n",
      "\t>>> from pandas.plotting import register_matplotlib_converters\n",
      "\t>>> register_matplotlib_converters()\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cumrets=(daily_pct_change+1).cumprod()-1\n",
    "plt.clf() # clear the prior plot before starting a new one\n",
    "sns.lineplot(data=cumrets).set_title(\"Returns, ex-dividends\")\n",
    "plt.show(grid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lecture flow\n",
    "\n",
    "Now please [go back](../02_Jupyter_Basics.html#Installing-libraries) and finish the lecture. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
